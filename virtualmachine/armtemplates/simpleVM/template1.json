{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "dnsLabelPrefix": {
        "type": "string",
        "metadata": {
          "description": "Unique public DNS prefix for the deployment. The fqdn will look something like '<dnsname>.westus.cloudapp.azure.com'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to '^[a-z][a-z0-9-]{1,61}[a-z0-9]$'."
        }
      },
      "vmName": {
        "type": "string",
        "defaultValue": "vm",
        "metadata": {
          "description": "The name of the VM"
        }
      },
      "adminUsername": {
        "type": "string",
        "defaultValue": "cloudguy",
        "metadata": {
          "description": "The name of the administrator of the new VM. Exclusion list: 'admin','administrator'"
        }
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "The password for the administrator account of the new VM"
        }
      },
      "rdpPort": {
        "type": "int",
        "defaultValue": 50001,
        "metadata": {
          "description": "Public port number for RDP"
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
        },
      "EnvironmentSize": {
        "type": "string",
        "defaultValue": "medium",
        "allowedValues": [
            "medium",
            "large"
        ],
        "metadata": {
            "description": "Medium for regular development. Large for Machine Learning development"
        }
        }
    },
    "variables": {
        "suffix": "[uniqueString(resourceGroup().id, resourceGroup().location)]",
        "storageAccountName": "[concat(toLower(parameters('vmName')),'sto')]",
        "virtualNetworkName": "rdpVNET",
        "publicIpAddressName": "[concat(uniquestring(resourceGroup().id), '-pip')]",
        "TS-Size":{
            "medium":{
                "VMSize": "Standard_D2s_v3"
            },
            "large":{
                "VMSize": "Standard_D8s_v3"
            }
        },
        "VMName": "[substring(toLower(concat(parameters('vmName'), variables('suffix'))),0,14)]",
        "vnetAddressRange": "10.0.0.0/16",
        "subnetAddressRange": "10.0.0.0/24",
        "subnetName": "Subnet",
        "subnet-id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')),'/subnets/',variables('subnetName'))]",
        "imagePublisher": "MicrosoftWindowsServer",
        "imageOffer": "WindowsServer",
        "imageSku": "2012-R2-Datacenter"
    },
    "resources": [
    {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIpAddressName')]",
        "location": "[parameters('location')]",
        "properties": 
        {
            "publicIPAllocationMethod": "Dynamic",
            "dnsSettings": 
            {
                "domainNameLabel": "[parameters('dnsLabelPrefix')]"
            }   
        }
      },
      {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('storageAccountName')]",
        "location": "[parameters('location')]",
        "properties": 
        {
            "accountType": "Standard_LRS"
        }
      },
      {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Network/virtualNetworks",
        "name": "[variables('virtualNetworkName')]",
        "location": "[parameters('location')]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[variables('vnetAddressRange')]"
            ]
          },
          "subnets": [
            {
              "name": "Subnet",
              "properties": {
                "addressPrefix": "[variables('subnetAddressRange')]"
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2015-06-15",
        "name": "loadBalancer",
        "type": "Microsoft.Network/loadBalancers",
        "location": "[parameters('location')]",
        "dependsOn": [
          "Microsoft.Network/publicIPAddresses/publicIp"
        ],
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "LBFE",
              "properties": {
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses','publicIp')]"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "LBBAP"
            }
          ],
          "inboundNatRules": [
            {
              "name": "rdp",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/frontendIPConfigurations/LBFE')]"
                },
                "protocol": "Tcp",
                "frontendPort": "[parameters('rdpPort')]",
                "backendPort": 3389,
                "enableFloatingIP": false
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[concat(variables('VMName'),'-nic')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
          "Microsoft.Network/loadBalancers/loadBalancer"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('subnet-id')]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/backendAddressPools/LBBAP')]"
                  }
                ],
                "loadBalancerInboundNatRules": [
                  {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer'),'/inboundNatRules/rdp')]"
                  }
                ]
              }
            }
          ]
        }
      },
      {
        "apiVersion": "2016-04-30-preview",
        "type": "Microsoft.Compute/virtualMachines",
        "name": "[variables('VMName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
          "[concat('Microsoft.Network/networkInterfaces/',variables('VMName'),'-nic')]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[variables('TS-Size')[parameters('EnvironmentSize')].VMSize]"
            },
          "osProfile": {
            "computerName": "[parameters('vmName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "[variables('imagePublisher')]",
              "offer": "[variables('imageOffer')]",
              "sku": "[variables('imageSku')]",
              "version": "latest"
            },
            "osDisk": {
              "createOption": "FromImage"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('VMName'),'-nic'))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net')]"
            }
          }
        }
      }
    ]
  }