az group create --name myResourceGroupLB --location eastus
az network public-ip create --resource-group myResourceGroupLB --name myPublicIP
az network lb create --resource-group myResourceGroupLB --name myLoadBalancer --public-ip-address myPublicIP --frontend-ip-name myFrontEndPool --backend-pool-name myBackEndPool
az network lb probe create --resource-group myResourceGroupLB \--lb-name myLoadBalancer \--name myHealthProbe \--protocol tcp --port 80
az network lb rule create --resource-group myResourceGroupLB --lb-name myLoadBalancer --name myHTTPRule --protocol tcp --frontend-port 80 --backend-port 80 --frontend-ip-name myFrontEndPool --backend-pool-name myBackEndPool --probe-name myHealthProbe
az network vnet create --resource-group myResourceGroupLB --location eastus --name myVnet --subnet-name mySubnet
az network nsg create --resource-group myResourceGroupLB --name myNetworkSecurityGroup
az network nsg rule create --resource-group myResourceGroupLB --nsg-name myNetworkSecurityGroup --name myNetworkSecurityGroupRuleHTTP --protocol tcp --direction inbound --source-address-prefix '*' --source-port-range '*' --destination-address-prefix '*' --destination-port-range 80 --access allow --priority 200
for i in `seq 1 2`; do
  az network nic create --resource-group myResourceGroupLB --name myNic$i --vnet-name myVnet --subnet mySubnet --network-security-group myNetworkSecurityGroup --lb-name myLoadBalancer --lb-address-pools myBackEndPool
done
az vm availability-set create --resource-group myResourceGroupLB --name myAvailabilitySet


#cloud-config
package_upgrade: true
packages:
  - nginx
  - nodejs
  - npm
write_files:
  - owner: www-data:www-data
  - path: /etc/nginx/sites-available/default
    content: |
      server {
        listen 80;
        location / {
          proxy_pass http://localhost:3000;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection keep-alive;
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }
      }
  - owner: azureuser:azureuser
  - path: /home/azureuser/myapp/index.js
    content: |
      var express = require('express')
      var app = express()
      var os = require('os');
      app.get('/', function (req, res) {
        res.send('Hello World from host ' + os.hostname() + '!')
      })
      app.listen(3000, function () {
        console.log('Hello world app listening on port 3000!')
      })
runcmd:
  - service nginx restart
  - cd "/home/azureuser/myapp"
  - npm init
  - npm install express -y
  - nodejs index.js

for i in `seq 1 2`; do
    az vm create --resource-group myResourceGroupLB --name myVM$i --availability-set myAvailabilitySet --nics myNic$i --image UbuntuLTS --generate-ssh-keys --custom-data cloud-init.txt --no-wait
done

az network public-ip show --resource-group myResourceGroupLB --name myPublicIP --query [ipAddress] --output tsv