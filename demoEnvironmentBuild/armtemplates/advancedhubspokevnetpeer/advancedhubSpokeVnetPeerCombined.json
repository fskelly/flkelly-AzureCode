{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dnsLabelPrefix": {
        "type": "string",
        "metadata": {
            "description": "Unique public DNS prefix for the deployment. The fqdn will look something like '<dnsname>.westus.cloudapp.azure.com'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to '^[a-z][a-z0-9-]{1,61}[a-z0-9]$'."
      },
    "defaultValue": "prefix"
    },
    "vmLabel": {
        "type": "string",
        "defaultValue": "label",
        "metadata": {
            "description": "Used as part of the naming pattern - dnsLabelPrefix-vmLabel-guid"
        }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "cloud_admin",
      "metadata": {
        "description": "The name of the administrator of the new VM. Exclusion list: 'admin','administrator'"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "The password for the administrator account of the new VM"
      }
    },
    "rdpPort": {
      "type": "int",
      "defaultValue": 50001,
      "metadata": {
        "description": "Public port number for RDP"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "vpnType": {
      "type": "string",
      "metadata": {
          "description": "Route based or policy based"
        },
      "defaultValue": "RouteBased",
      "allowedValues": [
        "RouteBased",
        "PolicyBased"
        ]
    },
    "gatewaySku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "HighPerformance"
      ],
      "metadata": {
        "description": "The Sku of the Gateway. This must be one of Basic, Standard or HighPerformance."
      }
    },
    "sharedKey": {
      "type": "securestring",
      "metadata": {
        "description": "Shared key (PSK) for IPSec tunnel"
      }
    }
  }, 
  "variables": {
    "gatewaySubnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('hubVnet').name,'GatewaySubnet')]",
    "suffix": "[uniqueString(resourceGroup().id, resourceGroup().location)]",
    "VM1Name": "[substring(toLower(concat(parameters('dnsLabelPrefix'), parameters('vmLabel'), '-1', variables('suffix'))),0,14)]",
    "VM2Name": "[substring(toLower(concat(parameters('dnsLabelPrefix'), parameters('vmLabel'), '-2', variables('suffix'))),0,14)]",
    "storageAccountName": "[substring(toLower(concat('diag', resourceGroup().location, uniquestring(resourceGroup().id))),0,23)]",
    "subnet1-id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vNet1').name),'/subnets/',variables('vNet1').subnetName)]",
    "subnet2-id": "[concat(resourceId('Microsoft.Network/virtualNetworks', variables('vNet2').name),'/subnets/',variables('vNet2').subnetName)]",
    "imagePublisher": "MicrosoftWindowsServer",
    "imageOffer": "WindowsServer",
    "imageSku": "2012-R2-Datacenter",
    "hubVnet": {
        "name": "hubVnet",
        "addressSpacePrefix": "172.16.0.0/16",
        "subnetName": "hubSubnet",
        "subnetPrefix": "172.16.0.0/24",
        "gatewaySubnetPrefix": "172.16.1.200/29"
    },
    "vNet1": {
        "name":"vNet1",
        "addressSpacePrefix": "10.0.0.0/24",
        "subnetName": "subnet1",
        "subnetPrefix": "10.0.0.0/24"
    },
    "vNet2": {
        "name":"vNet2",
        "addressSpacePrefix": "192.168.0.0/24",
        "subnetName": "subnet1",
        "subnetPrefix": "192.168.0.0/24"
    },
    "hubVnetTovNet1PeeringName": "[concat(variables('hubVnet').name, '-', variables('vNet1').name)]",
    "hubVnetTovNet2PeeringName": "[concat(variables('hubVnet').name, '-', variables('vNet2').name)]",
    "vNet1TohubVnetPeeringName": "[concat(variables('vNet1').name, '-', variables('hubVnet').name)]",
    "vNet2TohubVnetPeeringName": "[concat(variables('vNet2').name, '-', variables('hubVnet').name)]",
    "publicIpAddress1Name": "[toLower(concat(variables('VM1Name'),'-pip'))]",
    "publicIpAddress2Name": "[toLower(concat(variables('VM2Name'),'-pip'))]",
    "localGateway" :{
      "name": "localGateway",
      "connectionIP": "1.1.1.1",
      "localAddressPrefix": [
        "192.168.0.0/24",
        "192.168.32.0/24",
        "192.168.37.0/24"
      ]
    },
    "connectionName": "[concat(variables('hubVnet').name, '-to-', variables('localGateway').connectionIP)]",
    "gatewayName": "azureGateway",
    "gatewayPublicIPName": "azureGatewayIP"
  },
  "resources": [
    {
      "apiVersion": "2018-08-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpAddress1Name')]",
      "location": "[parameters('location')]",
      "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[variables('VM1Name')]"
          }
      }
    },
    {
      "apiVersion": "2018-08-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIpAddress2Name')]",
      "location": "[parameters('location')]",
      "properties": {
          "publicIPAllocationMethod": "Dynamic",
          "dnsSettings": {
            "domainNameLabel": "[variables('VM2Name')]"
          }
      }
    },    
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "properties": {
          "accountType": "Standard_LRS"
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNet1').name]",
      "location": "[resourceGroup().location]",
      "comments": "This is the first vNet",
      "properties": {
        "addressSpace": {
            "addressPrefixes": [
                 "[variables('vNet1').addressSpacePrefix]"
            ]
        },
        "subnets": [
            {
                "name": "[variables('vNet1').subnetName]",
                "properties": {
                    "addressPrefix": "[variables('vNet1').subnetPrefix]"
                }
            }
          ]
        },
      "resources": [
        {
          "apiVersion": "2016-06-01",
          "type": "virtualNetworkPeerings",
          "name": "[variables('vNet1TohubVnetPeeringName')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
             "[concat('Microsoft.Network/virtualNetworks/', variables('hubVnet').name)]",
             "[concat('Microsoft.Network/virtualNetworks/', variables('vNet1').name)]"
          ],
          "comments": "This is the peering from hubVnet to vNet 1",
          "properties": {
            "allowVirtualNetworkAccess": "true",
            "allowForwardedTraffic": "false",
            "allowGatewayTransit": "false",
            "useRemoteGateways": "false",
            "remoteVirtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('hubVnet').name)]"
           }
          }
        }
      ]
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vNet2').name]",
      "location": "[resourceGroup().location]",
      "comments": "This is the second vNet",
      "properties": {
        "addressSpace": {
            "addressPrefixes": [
                "[variables('vNet2').addressSpacePrefix]"
            ]
        },
        "subnets": [
            {
                "name": "[variables('vNet2').subnetName]",
                "properties": {
                    "addressPrefix": "[variables('vNet2').subnetPrefix]"
                }
            }
        ]
      },
      "resources": [
       {
           "apiVersion": "2016-06-01",
           "type": "virtualNetworkPeerings",
           "name": "[variables('vNet2TohubVnetPeeringName')]",
           "location": "[resourceGroup().location]",
           "dependsOn": [
               "[concat('Microsoft.Network/virtualNetworks/', variables('hubVnet').name)]",
               "[concat('Microsoft.Network/virtualNetworks/', variables('vNet2').name)]"
           ],
           "comments": "This is the peering from hubVnet to vNet 2",
           "properties": {
               "allowVirtualNetworkAccess": "true",
               "allowForwardedTraffic": "false",
               "allowGatewayTransit": "false",
               "useRemoteGateways": "false",
                "remoteVirtualNetwork": {
                   "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('hubVnet').name)]"
               }
           }
       }
      ]
    },
    {
      "apiVersion": "2015-06-15",
      "name": "loadBalancer1",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddress1Name'))]"        ],
      "properties": {
          "frontendIPConfigurations": [
          {
              "name": "LBFE",
              "properties": {
              "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpAddress1Name'))]"
                  }
              }
          }
      ],
      "backendAddressPools": [
          {
              "name": "LBBAP"
          }
      ],
      "inboundNatRules": [
          {
              "name": "rdp",
              "properties": {
              "frontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer1'),'/frontendIPConfigurations/LBFE')]"
              },
              "protocol": "Tcp",
              "frontendPort": "[parameters('rdpPort')]",
              "backendPort": 3389,
              "enableFloatingIP": false
              }
          }
      ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "name": "loadBalancer2",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddress2Name'))]"
      ],
      "properties": {
          "frontendIPConfigurations": [
          {
              "name": "LBFE",
              "properties": {
                  "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIpAddress2Name'))]"
                  }
              }
          }
      ],
      "backendAddressPools": [
          {
            "name": "LBBAP"
          }
          ],
          "inboundNatRules": [
              {
              "name": "rdp",
              "properties": {
                  "frontendIPConfiguration": {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer2'),'/frontendIPConfigurations/LBFE')]"
                  },
              "protocol": "Tcp",
              "frontendPort": "[parameters('rdpPort')]",
              "backendPort": 3389,
              "enableFloatingIP": false
              }
          }
      ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('VM1Name'),'-nic')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vNet1').name)]",
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddress1Name'))]",
        "Microsoft.Network/loadBalancers/loadBalancer1"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('subnet1-id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer1'),'/backendAddressPools/LBBAP')]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer1'),'/inboundNatRules/rdp')]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('VM2Name'),'-nic')]",
      "location": "[parameters('location')]",
      "dependsOn": [
          "[concat('Microsoft.Network/virtualNetworks/', variables('vNet2').name)]",
          "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddress2Name'))]",
          "Microsoft.Network/loadBalancers/loadBalancer2"
        ],
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "subnet": {
                  "id": "[variables('subnet2-id')]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer2'),'/backendAddressPools/LBBAP')]"
                  }
                ],
                "loadBalancerInboundNatRules": [
                  {
                    "id": "[concat(resourceId('Microsoft.Network/loadBalancers','loadBalancer2'),'/inboundNatRules/rdp')]"
                  }
                ]
              }
            }
          ]
        }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('VM1Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/',variables('VM1Name'),'-nic')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_A0"
        },
        "osProfile": {
          "computerName": "[variables('VM1Name')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('VM1Name'),'-nic'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "apiVersion": "2016-04-30-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('VM2Name')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/',variables('VM2Name'),'-nic')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_A0"
        },
        "osProfile": {
          "computerName": "[variables('VM2Name')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('VM2Name'),'-nic'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('http://',variables('storageAccountName'),'.blob.core.windows.net')]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/localNetworkGateways",
      "name": "[variables('localGateway').name]",
      "location": "[resourceGroup().location]",
      "properties": {
        "localNetworkAddressSpace": {
          "addressPrefixes": "[variables('localGateway').localAddressPrefix]"
        },
        "gatewayIpAddress": "[variables('localGateway').connectionIP]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('connectionName')]",
      "type": "Microsoft.Network/connections",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworkGateways/', variables('gatewayName'))]",
        "[concat('Microsoft.Network/localNetworkGateways/', variables('localGateway').name)]"
      ],
      "properties": {
        "virtualNetworkGateway1": {
          "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', variables('gatewayName'))]"
        },
        "localNetworkGateway2": {
          "id": "[resourceId('Microsoft.Network/localNetworkGateways', variables('localGateway').name)]"
        },
        "connectionType": "IPsec",
        "routingWeight": 10,
        "sharedKey": "[parameters('sharedKey')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('hubVnet').name]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('hubVnet').addressSpacePrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('hubVnet').subnetName]",
            "properties": {
              "addressPrefix": "[variables('hubVnet').subnetPrefix]"
            }
          },
          {
            "name": "GatewaySubnet",
            "properties": {
              "addressPrefix": "[variables('hubVnet').gatewaySubnetPrefix]"
            }
          }
        ]
      },
      "resources": [
      {
             "apiVersion": "2016-06-01",
             "type": "virtualNetworkPeerings",
             "name": "[variables('hubVnetTovNet1PeeringName')]",
             "location": "[resourceGroup().location]",
             "dependsOn": [
                 "[concat('Microsoft.Network/virtualNetworks/', variables('hubVnet').name)]",
                 "[concat('Microsoft.Network/virtualNetworks/', variables('vNet1').name)]"
             ],
             "comments": "This is the peering from hubVnet to vNet 1",
             "properties": {
                 "allowVirtualNetworkAccess": "true",
                 "allowForwardedTraffic": "false",
                 "allowGatewayTransit": "false",
                 "useRemoteGateways": "false",
                 "remoteVirtualNetwork": {
                     "id": "[resourceId('Microsoft.Network/virtualNetworks',variables('vNet1').name)]"
                 }
             }
         },
         {
               "apiVersion": "2016-06-01",
               "type": "virtualNetworkPeerings",
               "name": "[variables('hubVnetTovNet2PeeringName')]",
               "location": "[resourceGroup().location]",
               "dependsOn": [
                   "[concat('Microsoft.Network/virtualNetworks/', variables('hubVnet').name)]",
                   "[concat('Microsoft.Network/virtualNetworks/', variables('vNet2').name)]"
               ],
               "comments": "This is the peering from hubVnet to vNet 1",
               "properties": {
                   "allowVirtualNetworkAccess": "true",
                   "allowForwardedTraffic": "false",
                   "allowGatewayTransit": "false",
                   "useRemoteGateways": "false",
                   "remoteVirtualNetwork": {
                       "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vNet2').name)]"
                   }
               }
           }
        ]
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('gatewayPublicIPName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic"
        }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworkGateways",
      "name": "[variables('gatewayName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('gatewayPublicIPName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('hubVnet').name)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('gatewaySubnetRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('gatewayPublicIPName'))]"
              }
            },
            "name": "vnetGatewayConfig"
          }
        ],
        "sku": {
          "name": "[parameters('gatewaySku')]",
          "tier": "[parameters('gatewaySku')]"
        },
        "gatewayType": "Vpn",
        "vpnType": "[parameters('vpnType')]",
        "enableBgp": "false"
      }
    }
  ]
}